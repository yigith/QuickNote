// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickNote.Api.Data;

namespace QuickNote.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuickNote.Api.Data.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NoteBookId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NoteBookId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Console.WriteLine(\"Hello World!\");",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 12, 11, 19, 43, 161, DateTimeKind.Unspecified).AddTicks(1973), new TimeSpan(0, 3, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(2022, 1, 12, 11, 19, 43, 167, DateTimeKind.Unspecified).AddTicks(7776), new TimeSpan(0, 3, 0, 0, 0)),
                            NoteBookId = 1,
                            Title = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Content = "console.log('Hello World!');",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 12, 11, 19, 43, 168, DateTimeKind.Unspecified).AddTicks(1540), new TimeSpan(0, 3, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(2022, 1, 12, 11, 19, 43, 168, DateTimeKind.Unspecified).AddTicks(1586), new TimeSpan(0, 3, 0, 0, 0)),
                            NoteBookId = 1,
                            Title = "JavaScript"
                        });
                });

            modelBuilder.Entity("QuickNote.Api.Data.NoteBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NoteBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "code"
                        });
                });

            modelBuilder.Entity("QuickNote.Api.Data.Note", b =>
                {
                    b.HasOne("QuickNote.Api.Data.NoteBook", "NoteBook")
                        .WithMany("Notes")
                        .HasForeignKey("NoteBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteBook");
                });

            modelBuilder.Entity("QuickNote.Api.Data.NoteBook", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
